// Creates the player rank table for solo-based maps, where each player
// competes against one another to the finish.
//
// Original Author: 
// - Positron
// Edited by:
// - Hypnotoad (note this includes my own comments as I try and work through this script to understand it)
// - Wirtualnosc
//
// License:
// Free for any purpose. I'm not liable for any damages.

#library "jmrsolo"
#include "zcommon.acs"

#import "constants.acs"
#import "utility.acs"
#import "timer.acs"

#import "ranker_hs.acs" 

#import "paths.acs"

#import "scoreboard.acs"

// Start script number.
#libdefine JRS_SCRIPT_START 950

// Time to wait in tics before displaying the updated table after a player
// crosses the finish line.
#define JRS_SHOW_DELAY_TIME 16
#define JRS_INDI_TIME_LINEID 732

// Time, in seconds, to wait before automatically showing record details.
#define JRS_AUTO_SHOW_DELAY 3
#define JRS_RANK_LIMIT_MIN 3
#define JRS_RANK_LIMIT_MAX 5

// This variable will store the amount of players to dispaly.
int _jrs_show_limit = JRS_RANK_LIMIT_MAX;
// Rank number colors.
int _jrs_rank_colors[ JRS_RANK_LIMIT_MAX ] = {
   "f", // Gold
   "j", // Silver
   "e", // Brown
   "n", // Light blue
   "t", // Purple
};

// The refresh time is the time in seconds it takes to re-display the table.
// This is needed to reflect name changes if people who are ranked change 
// their name. We set it to eight seconds to preserve bandwidth.
#define JRS_TBL_REFRESH_TIME 8
#define JRS_TBL_X 250
#define JRS_TBL_Y 45100
#define JRS_TBL_LINE_HEIGHT 2900
// The offset is used to prevent ID conflicts in HudMessages from
// other scripts.
#define JRS_TBL_LINEID_OFFSET 733

// Ranked player properties:
#define JRS_IDX_NUM 0
#define JRS_IDX_MINUTES 1
#define JRS_IDX_SECONDS 2
#define JRS_IDX_CENTISECONDS 3

// Holds players that completed map.
bool _jrs_finished[ MAX_PLAYERS ]; 
// Contains information about a player's finish time.
int _jrs_table[ JRS_RANK_LIMIT_MAX ][ 4 ];
int _jrs_table_size = 0;

bool rectried = false;

// Start.
script JRS_SCRIPT_START ( void ) {
   isTeamMap = false;
   if ( is_online() ) { //checks if the game is being hosted, found in utility.acs
      // Load high score.
      if ( JrhIsEnabled() ) { //checks if hosted, if luk is enabled (deprecated), and not manually disabled, located in ranker_hs. 
         JrhSetLoadScript( 955 ); //sets _jrh_script_load value, located in ranker_hs
         JrhSetDetailsScript( 956 ); //sets _jrh_script_details value, located in ranker_hs, value is used in JrhShowDetails
         acs_ExecuteWait( 955, 0 ); //executes high score loading script
      }

      // Run table refresh script.
      acs_Execute( 951, 0 ); //right below!
   }
}

// Table display refresh.
script 951 ( void ) {
   int time_passed = 0;
   int limit = 0;

   while ( true ) {
      limit = getCVar( "jm_table_show_limit" );

      // Table display limit check.
      if ( limit != _jrs_show_limit && 
         // Only update the show limit if it's within our limits.
         limit >= JRS_RANK_LIMIT_MIN && 
         limit <= JRS_RANK_LIMIT_MAX ) {
         JrsClearTable(); //clears table lines
         _jrs_show_limit = limit;
         JrsShowTable(); //show highscores table
      }
      // Table refresh.
      else if ( time_passed % JRS_TBL_REFRESH_TIME == 0 ) {
         JrsShowTable();
      }

      delay( TICS_IN_SECOND );
      time_passed += 1;
   }
}

script 954 ENTER {
   JrsClearIndividualTime(); //clears message from offset
}

function void JrsFinish( void ) { //finish line
   int finish_time = TimerGetTics();
   int player = playerNumber();

   if ( player >= 0 && ! JrsIsFinished( player ) ) { //checks player hasn't already finished
      JrsRemember( player, true ); 

      // In multiplayer, register player in table.
      if ( is_online() ) { //check if online etc
         acs_ExecuteAlways( 952, 0, player, finish_time ); //right below
		 checkpb (finish_time, playerNumber());
      }
      // In single player, show individual time.
      else {
         JrsShowIndividualTime( finish_time ); 
      }
	  
	  Scoreboard_UpdateSolo( playerNumber(), finish_time );
   }
}

function bool JrsIsFinished( int player ) {
   return _jrs_finished[ player ];
}

function void JrsRemember( int player, bool toRemember ) {
   _jrs_finished[ player ] = toRemember;
}

// Adds player to table.
script 952 ( int player, int playerTime ) {
   bool is_added = false;

   // Add player into table if spots are available.
   if ( _jrs_table_size < JRS_RANK_LIMIT_MAX ) {
      JrsSaveInTable( player, playerTime ); //adds to the table
      is_added = true;

      // High score.
      //
      if ( _jrs_table_size == 1 || !JrhIsSet( pathPlayerRoute( player ) ) || !rectried ) {
		 if (PlayerIsLoggedIn(player) == true)
			rectried = true;
         // Confirm we have new record.
         if ( JrhIsEnabled() && JrhIsNew( playerTime,  pathPlayerRoute( player ) ) ) { //JrhIsNew --> checks whether the the record has been set and if the time is lower than _jrh_tics, located in ranker_hs, 
            // Make sure no cheating has occured.
			if (PlayerIsLoggedIn(player) == 0)
			{
				print(s:"\cgPlease login to set records on solo maps!");	
			}
			else if (!JRSIsReallyNew(playerTime, pathPlayerRoute( player ) )) //make sure another server didn't update the record with a new high score
				print(s:"Record not saved: faster time found on database (probably from another server)");
            else if ( ! JrhIsCheater( player ) ) { //value probably set via map script
               JrsHsSave( player, playerTime ); //saves record to DB
               JrsHsAnnounceNew(); //shows message and plays sound
               // Reload high score
               acs_ExecuteWait( 955, 0 ); //DB updating
            }
            // Otherwise, tell everybody a nice message.
            else {
               JrsHsAnnounceCheat(); 
            }
         }
      }
   }

   // Display.

   // Small delay to replicate old script's delay effect.
   delay( JRS_SHOW_DELAY_TIME );

   // Show updated table if modified and show-limit isn't passed.
   if ( is_added && _jrs_table_size <= _jrs_show_limit ) {
      JrsShowTable();
   }
   // Otherwise, show individual time for player.
   else {
      JrsShowIndividualTime( playerTime );
   }
}

function void JrsSaveInTable( int playerNum, int timeInTics ) {
   _jrs_table[ _jrs_table_size ][ JRS_IDX_NUM ] = playerNum;

   int seconds = timeInTics / TICS_IN_SECOND;
   _jrs_table[ _jrs_table_size ][ JRS_IDX_MINUTES ] =
      seconds / SECONDS_IN_MINUTE;
   _jrs_table[ _jrs_table_size ][ JRS_IDX_SECONDS ] = 
      seconds % SECONDS_IN_MINUTE;
   _jrs_table[ _jrs_table_size ][ JRS_IDX_CENTISECONDS ] =
      cal_cseconds( timeInTics % TICS_IN_SECOND );

   _jrs_table_size += 1;
}

function int JrsGetPosition( int player ) {
   for ( int pos = 0; pos < _jrs_table_size; pos += 1 ) {
      if ( _jrs_table[ pos ][ JRS_IDX_NUM ] == player ) {
         return pos;
      }
   }

   return VALUE_NONE;
}

script 953 ( int player ) DISCONNECT {
   if ( JrsIsFinished( player ) ) {
      JrsRemember( player, false ); //forget playernum for hs table
      JrsRemoveFromTable( player );
      delay( JRS_SHOW_DELAY_TIME );
      JrsShowTable();
   }
}

function void JrsRemoveFromTable( int player ) {
   int pos = JrsGetPosition( player );
   if ( pos != VALUE_NONE ) {
      // We indicate that a player has disconnected by
      // removing the player's number with a predefined value.
      _jrs_table[ pos ][ JRS_IDX_NUM ] = VALUE_NONE;
   }
}

function void JrsShowTable( void ) {
   // We need to set the font to small. Otherwise, the font will
   // vary at different times due to the jumpmaze timer.
   setFont( "SMALLFONT" );

   // Determine the starting height of the table based on the current
   // rank limit.
   int line_height = JRS_TBL_Y + 
      ( ( JRS_RANK_LIMIT_MAX - _jrs_show_limit ) * JRS_TBL_LINE_HEIGHT );
   int line_id = JRS_TBL_LINEID_OFFSET;

   // We only display the high score if we have one and if it's the only path.
   if ( pathCount() == 1 && JrhIsSet( 0 ) ) { //check high score is set
      int record_line_height = line_height - JRS_TBL_LINE_HEIGHT;
      JrsHsShowFinishTime( line_id, record_line_height, 0 ); //uses variables from ranker_hs
      line_id += 1;
   }

   // Determine the amount of lines to display.
   int places_to_display = _jrs_table_size;
   if ( places_to_display > _jrs_show_limit ) {
      places_to_display = _jrs_show_limit;
   }

   for ( int place = 0; place < places_to_display; place += 1 ) {
      int player = _jrs_table[ place ][ JRS_IDX_NUM ];
      str suffix = ordinal_suffix( place + 1 );

      int minutes = _jrs_table[ place ][ JRS_IDX_MINUTES ];
      str minutes_p = number_prefix( minutes );
      int seconds = _jrs_table[ place ][ JRS_IDX_SECONDS ];
      str seconds_p = number_prefix( seconds );
      int centiseconds = _jrs_table[ place ][ JRS_IDX_CENTISECONDS ];
      str centiseconds_p = number_prefix( centiseconds );

      // Present players:
      if ( player != VALUE_NONE ) {
         hudMessageBold(
            s : "\c", s : _jrs_rank_colors[ place ],
            i : place + 1, s : suffix, s : ":\c- ",
            n : player + 1,
            s : "\n\ciTime: \cb",
            s : minutes_p, i : minutes, 
            s : ":",
            s : seconds_p, i : seconds,
            s : "\cs.",
            s : centiseconds_p, i : centiseconds,
            s : "\c-" ;
            HUDMSG_PLAIN, line_id, 0, JRS_TBL_X, line_height, 0
         );
      }
      // Disconnected players:
      else {
         hudMessageBold( 
            s : "\c", s : _jrs_rank_colors[ place ],
            i : place + 1, s : suffix, 
            s : ": \cgDisconnected\c-\n",
            s : "\ciTime: \cb",
            s : minutes_p, i : minutes,
            s : ":",
            s : seconds_p, i : seconds,
            s : "\cs.",
            s : centiseconds_p, i : centiseconds,
            s : "\c-" ;
            HUDMSG_PLAIN, line_id, 0, JRS_TBL_X, line_height, 0
         );
      }

      line_height += JRS_TBL_LINE_HEIGHT;
      line_id += 1;
   }
}

function void JrsClearTable( void ) {
   int lines_to_clear = _jrs_show_limit;

   // Clear the extra record time line.
   if ( pathCount() == 1 && JrhIsSet( 0 ) ) {
      lines_to_clear += 1;
   }

   for ( int line = 0; line < lines_to_clear; line += 1 ) {
      // We clear the previous rendition by using the same
      // message ID, but this time, using a blank string.
      clear_message_bold( JRS_TBL_LINEID_OFFSET + line );
   }
}

function void JrsShowIndividualTime( int timeInTics ) {
   setFont( "SMALLFONT" );

   // Calculate the individual time to display:
   int time = timeInTics / TICS_IN_SECOND;
   int minutes = time / SECONDS_IN_MINUTE;
   int seconds = time % SECONDS_IN_MINUTE;
   int centiseconds = cal_cseconds( timeInTics % TICS_IN_SECOND );

   hudMessage(
      s : "\crTime: \cc", 
      s : number_prefix( minutes ), i : minutes, 
      s : ":", 
      s : number_prefix( seconds ), i : seconds,
      s : "\cu.",
      s : "", s : number_prefix( centiseconds ), i : centiseconds, 
      s : "\c-" ;
      HUDMSG_PLAIN, JRS_INDI_TIME_LINEID, 0, JRS_TBL_X, 
      JRS_TBL_Y + ( JRS_TBL_LINE_HEIGHT * JRS_RANK_LIMIT_MAX ), 0
   );
}

function void JrsClearIndividualTime( void ) {
   clear_message( JRS_INDI_TIME_LINEID ); 
}

// High Score (luk/DB-specific functions and scripts)
// ---------------------------------------------------------------------------

#define JRS_HS_TBL_X -1.75
#define JRS_HS_TBL_Y 0.7
#define JRS_HS_TBL_LINE JRH_LINE_NOTICE
#define JRS_HS_TBL_LINE_HEIGHT 1000
#define JRS_HS_TBL_SHOW_TIME 8.0

// luk database record keys.
str JRS_HS_RTIME = "jrs_hs_time"; 
str JRS_HS_RAUTHOR = "jrs_hs_author";
str JRS_HS_RDATE = "jrs_hs_rdate";

// High score author.
int _jrs_hs_author[ MAX_ROUTES ][100];

// High score finish time.
int _jrs_hs_minutes[ MAX_ROUTES ] = {VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE};
int _jrs_hs_seconds[ MAX_ROUTES ] = {VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE};
int _jrs_hs_centiseconds[ MAX_ROUTES ] = {VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE, VALUE_NONE};

// High score date. 
int _jrs_hs_year[ MAX_ROUTES ] = { 0, 0, 0, 0, 0, 0, 0, 0 };
int _jrs_hs_month[ MAX_ROUTES ] = { 0, 0, 0, 0, 0, 0, 0, 0 };
int _jrs_hs_day[ MAX_ROUTES ] = { 0, 0, 0, 0, 0, 0, 0, 0 };

// High score loading. 
script 955 ( void ) {
	for ( int route = 0; route < pathCount(); route++ ) {
		JrsHsSetFinishTime(GetDBEntry(pathMapName( route ), JRS_HS_RTIME), route); //Simple DB setting
		JrsHsSetAuthor( route ); 
		int packed_data = GetDBEntry(pathMapName( route ), JRS_HS_RDATE);

		if (packed_data != 0)
		{
			// Packed date is of this format: YYYYMMDD
			_jrs_hs_day[ route ] = packed_data % 100;
			packed_data /= 100;
			_jrs_hs_month[ route ] = packed_data % 100;
			packed_data /= 100;
			_jrs_hs_year[ route ] = packed_data;
		}
	}
}

// Sets the finish time, in tics, of the high score and converts it into more
// familiar units like minutes and seconds.
function void JrsHsSetFinishTime( int tics, int route ) {
   if ( tics > 0 ) {
      int seconds = tics / TICS_IN_SECOND;

      _jrs_hs_minutes[ route ] = seconds / SECONDS_IN_MINUTE;
      _jrs_hs_seconds[ route ] = seconds % SECONDS_IN_MINUTE;
      _jrs_hs_centiseconds[ route ] = cal_cseconds( tics % TICS_IN_SECOND );

      JrhSetFinishTime( tics, route );
   }
}

// Sets the author of the high score
function void JrsHsSetAuthor( int route ) {
	str authstring = GetDBEntryString(pathMapName( route ), JRS_HS_RAUTHOR);
    for ( int i = 0; i < StrLen(authstring); ++i ) { _jrs_hs_author[ route ][ i ] = GetChar( authstring, i ); }
	_jrs_hs_author[ route ][ StrLen(authstring) ] = 0;
}

// Saves high score and all of its details in permanent storage. REPLACED WITH ZAN DB
function void JrsHsSave( int player, int tics ) { 
   int cdate = 0;
   cdate += GetTimeProperty(SystemTime(), TM_YEAR);
   cdate *= 100;
   cdate += GetTimeProperty(SystemTime(), TM_MONTH) + 1;
   cdate *= 100;
   cdate += GetTimeProperty(SystemTime(), TM_DAY);
   BeginDBTransaction();
   SetDBEntryString(pathMapName( pathPlayerRoute( player ) ), JRS_HS_RAUTHOR, StrParam(n:player + 1));
   SetDBEntry(pathMapName( pathPlayerRoute( player ) ), JRS_HS_RTIME, tics);
   SetDBEntry(pathMapName( pathPlayerRoute( player ) ), JRS_HS_RDATE, cdate);
   EndDBTransaction();
}

function void JrsHsShowFinishTime( int lineId, int lineHeight, int route ) {
   setFont( "SMALLFONT" );
   hudMessageBold(
      s : "\cnRecord: \cb",
      s : number_prefix( _jrs_hs_minutes[ route ] ), i : _jrs_hs_minutes[ route ], 
      s : ":", 
      s : number_prefix( _jrs_hs_seconds[ route ] ), i : _jrs_hs_seconds[ route ], 
      s : "\cs.",
      s : number_prefix( _jrs_hs_centiseconds[ route ] ), i : _jrs_hs_centiseconds[ route ], 
      s : "\c-" ;
      HUDMSG_PLAIN, lineId, 0, JRS_TBL_X, lineHeight, 0
   );
}

function void JrsHsAnnounceNew( void ) {
   setFont( "SMALL" );
   hudMessageBold(
      s : "\cd", n : 0, s : "\cd set a new map record!\c-" ;
      HUDMSG_FADEOUT | HUDMSG_LOG, 1900, 0, 1.5, 0.15, 5.0, 1.0
   );
   ambientSound( "JM2HSWIN", 127 );
}

function void JrsHsAnnounceCheat( void ) {
   hudMessageBold( 
      s : "\cgClever \cc", n : 0, s : "\cg tried to cheat to the ",
      s : "high score\c-" ;
      HUDMSG_FADEOUT | HUDMSG_LOG, 1900, 0, 1.5, 0.15, 5.0, 1.0
   );
   ambientSound( "JM2HSLOS", 127 );
}

// Prints high score details table.
script 956 ( int showTime, int route ) {
   int y = JRS_HS_TBL_Y;
   int line_id = JRS_HS_TBL_LINE;

   setFont( "SMALLFONT" );

   // Header:
   hudMessage(
      s : "\ciRecord details\c-" ;
      HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
   );

   y += JRS_HS_TBL_LINE_HEIGHT * 2;
   line_id += 1;

   // Record date:
   hudMessage(
      s : "\ckDate Set:\c-" ;
      HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
   );

   y += JRS_HS_TBL_LINE_HEIGHT;
   line_id += 1;
	
	if (_jrs_hs_year[ route ] != 0)
	{
		hudMessage(
		s : "\cc", s : conv_month_string( _jrs_hs_month[ route ] ), 
		s : " ", i : _jrs_hs_day[ route ], s : ", ", i : _jrs_hs_year[ route ], s : "\c-" ;
		HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
		);
	}
	else
	{
		hudMessage(
		s : " Date unavailable" ;
		HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
		);
	}
   
   

   y += JRS_HS_TBL_LINE_HEIGHT * 2;
   line_id += 1;

   // Record time:
   hudMessage(
      s : "\ckFinish Time:\c-" ;
      HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
   );

   y += JRS_HS_TBL_LINE_HEIGHT;
   line_id += 1;

   hudMessage(
      s : "\cb",
      s : number_prefix( _jrs_hs_minutes[ route ] ), i : _jrs_hs_minutes[ route ], 
      s : ":", 
      s : number_prefix( _jrs_hs_seconds[ route ] ), i : _jrs_hs_seconds[ route ], 
      s : "\cs.",
      s : number_prefix( _jrs_hs_centiseconds[ route ] ), i : _jrs_hs_centiseconds[ route ], 
      s : "\c-" ;
      HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
   );

   y += JRS_HS_TBL_LINE_HEIGHT * 2;
   line_id += 1;

   // Record holder:
   hudMessage(
      s : "\ckRecord Holder:\c-" ;
      HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
   );

   y += JRS_HS_TBL_LINE_HEIGHT;
   line_id += 1;

   hudMessage(
      s : "\cc", a : _jrs_hs_author[ route ], s : "\c-" ;
      HUDMSG_FADEOUT, line_id, 0, JRS_HS_TBL_X, y, showTime, 1.0
   );
}

//Personal Record specific scripts
//----------------------------------------

int joined[64];

script 840 ENTER
{
	if (is_online() == false || !JrhIsEnabled())
		terminate;
	while (PlayerIsLoggedIn(playernumber()) == 0 )
	{
		int started;
		if (started == 0)
			print(s:"Remember to login if you want your personal best times saved");
		started = 1;
		delay(35);
	}
	str mapname = pathMapName( pathPlayerRoute( PlayerNumber() ) );
	str yourname = GetPlayerAccountName(playernumber());
	int yourpb = GetDBEntry(StrParam(s:mapname,s:"_pbs"), yourname);
	if (yourpb != 0)
	{
		int seconds = yourpb / TICS_IN_SECOND;
		int pb_minutes = seconds / SECONDS_IN_MINUTE;
		int pb_seconds = seconds % SECONDS_IN_MINUTE;
		int pb_centiseconds = cal_cseconds( yourpb % TICS_IN_SECOND );
		int line_height = JRS_TBL_Y + ( ( JRS_RANK_LIMIT_MAX - _jrs_show_limit ) * JRS_TBL_LINE_HEIGHT ) - 2*JRS_TBL_LINE_HEIGHT;
		int line_id = JRS_TBL_LINEID_OFFSET - 1;
		setFont( "SMALLFONT" );
		hudMessage(
		s : "\cnYour Best: \cb",
		s : number_prefix( pb_minutes ), i : pb_minutes, 
		s : ":", 
		s : number_prefix( pb_seconds ), i : pb_seconds, 
		s : "\cs.",
		s : number_prefix( pb_centiseconds), i : pb_centiseconds, 
		s : "\c-",
		s : "\n(Rank: ",i:GetDBEntryRank(StrParam(s:mapname,s:"_pbs"), yourname,0),s:")";
		HUDMSG_PLAIN, line_id, 0, JRS_TBL_X, line_height, 0
		);
	}
	if (joined[playernumber()] == 0)
		acs_execute(842,0);
}

function void checkpb (int time, int player)
{
	if (is_online() == false || !JrhIsEnabled() || JrhIsCheater( player ))
		return;
	if (PlayerIsLoggedIn(player) == 0)
	{
		print(s:"Please login if you want your personal best times saved");
	}
	else
	{
		str yourname = GetPlayerAccountName(player);
		str mapname = pathMapName( pathPlayerRoute( PlayerNumber() ) );
		int yourpb = GetDBEntry(StrParam(s:mapname,s:"_pbs"), yourname);
		if (yourpb == 0 || time < yourpb)
		{
			SetDBEntry(StrParam(s:mapname,s:"_pbs"), yourname, time);
		}
		acs_executealways(840,0);
	}
}

script 842 (void)
{
	if (PlayerIsLoggedIn(playernumber()) == 0)
	{
		acs_execute(840,0);
		terminate;
	}
	joined[playernumber()] = 1;
	while( TRUE )
	{
		str mapname = pathMapName( pathPlayerRoute( PlayerNumber() ) );
		str yourname = GetPlayerAccountName(playernumber());
		int yourpb = GetDBEntry(StrParam(s:mapname,s:"_pbs"), yourname);
		if (yourpb != 0)
		{
			int seconds = yourpb / TICS_IN_SECOND;
			int pb_minutes = seconds / SECONDS_IN_MINUTE;
			int pb_seconds = seconds % SECONDS_IN_MINUTE;
			int pb_centiseconds = cal_cseconds( yourpb % TICS_IN_SECOND );
			int line_height = JRS_TBL_Y + ( ( JRS_RANK_LIMIT_MAX - _jrs_show_limit ) * JRS_TBL_LINE_HEIGHT ) - 2*JRS_TBL_LINE_HEIGHT;
			int line_id = JRS_TBL_LINEID_OFFSET - 1;
			setFont( "SMALLFONT" );
			hudMessage(
			s : "\cnYour Best: \cb",
			s : number_prefix( pb_minutes ), i : pb_minutes, 
			s : ":", 
			s : number_prefix( pb_seconds ), i : pb_seconds, 
			s : "\cs.",
			s : number_prefix( pb_centiseconds), i : pb_centiseconds, 
			s : "\c-",
			s : "\n(Rank: ",i:GetDBEntryRank(StrParam(s:mapname,s:"_pbs"), yourname,0),s:")";
			HUDMSG_PLAIN, line_id, 0, JRS_TBL_X, line_height, 0
			);
		}
		delay(35*10);
	}
}

script 843 (int gone) DISCONNECT
{
	joined[gone] = 0;
}

script 998 (void) NET
{
	ACS_Execute( 891, 0, 0, 0, 0 );
}

function int tosecs(int tics)
{
	int seconds = tics / TICS_IN_SECOND;
	return seconds % SECONDS_IN_MINUTE;
}

function int tomins(int tics)
{
	int seconds = tics / TICS_IN_SECOND;
	return seconds / SECONDS_IN_MINUTE;
}

function int tocsecs(int tics)
{
	return cal_cseconds( tics % TICS_IN_SECOND );
}
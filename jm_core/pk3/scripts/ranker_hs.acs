// Helps both the rankers with handling the high score.
//
// Author: 
// Positron (modified by Hypnotoad & Wirtualnosc)
//
// License:
// Free for any purpose. I'm not liable for any damages.

#library "jmrhighs"
#include "zcommon.acs"

#import "constants.acs"
#import "utility.acs"
#import "luk.acs"
#import "jmgame.acs"

#libdefine JRH_LINE_NOTICE 27233
#libdefine JRH_LINE_NOTICE_Y 0.55

#libdefine JRH_TBL_SHOW_TIME 8.0

// High score loading status.
#libdefine JRH_STATUS_NONE 0
#libdefine JRH_STATUS_LOADED 1
#libdefine JRH_STATUS_WORKING 2
#libdefine JRH_STATUS_ERROR 3

bool isTeamMap;

int _jrh_load_status = JRH_STATUS_NONE;
// Stores a ranker's high score load script number so other files can wait
// for the ranker to complete loading the high score.
int _jrh_script_load = 0;
// Script of the ranker that shows the high score details table.
int _jrh_script_details = 0;
bool _jrh_is_cheater[ MAX_PLAYERS ];
bool _jrh_manual_disable = false;

// High score finish time. We put some of the finish time handling here
// because both rankers use the same code.
int _jrh_tics = VALUE_NONE;

function int JrhGetLoadStatus( void ) {
   return _jrh_load_status;
}

function void JrhSetLoadStatus( int status ) {
   _jrh_load_status = status;
}

function int JrhGetLoadScript( void ) {
   return _jrh_script_load;
}

function void JrhSetLoadScript( int num ) {
   _jrh_script_load = num;
}

function void JrhSetDetailsScript( int num ) {
   _jrh_script_details = num;
}

function bool JrhIsAutoShowDetailsTable( void ) {
   return getCvar( "jm_show_rdetails" );
}

function bool JrhIsCheater( int player ) {
   return ( _jrh_is_cheater[ player ] || JrhIsCheatsEnabled() );
}

function void JrhMarkAsCheater( int player ) {
   _jrh_is_cheater[ player ] = true;
}

function bool JrhIsCheatsEnabled( void ) {
   return getCvar( "sv_cheats" );
}

// Checks whether the high score is enabled. 
function bool JrhIsEnabled( void ) {
   return ( is_online() && GetCVar("jm_enabledb") && ( ! _jrh_manual_disable ) ); 
}

function void JrhDisable( void ) {
   _jrh_manual_disable = true;
}

function int JrhGetFinishTime( void ) {
   return _jrh_tics;
}

function void JrhSetFinishTime( int tics ) {
   _jrh_tics = tics;
}

function bool JrhIsSet( void ) {
   return _jrh_tics != VALUE_NONE;
}

function bool JrhIsNew( int newTime ) {
   return ( _jrh_tics == VALUE_NONE || newTime < _jrh_tics );
}

function bool JRSIsReallyNew(int newTime) { //added by Hypnotoad, check in case the DB was updated with a new SOLO record
	int dbtime = GetDBEntry(toUpper(StrParam(n:PRINTNAME_LEVEL)), "jrs_hs_time");
	return (dbtime == 0 || newTime < dbtime);
}

function bool JRTIsReallyNew(int newTime) { //added by Hypnotoad, check in case the DB was updated with a new TEAM record
	int dbtime = GetDBEntry(toUpper(StrParam(n:PRINTNAME_LEVEL)), "jrt_hs_time");
	return (dbtime == 0 || newTime < dbtime);
}

function bool JMRIsReallyNew(int newTime) { //added by Hypnotoad, check in case the DB was updated with a new JMRUN record
	int dbtime = GetDBEntry(toUpper(StrParam(n:PRINTNAME_LEVEL)), "jmr_hs_time");
	return (dbtime == 0 || newTime < dbtime);
}

script 999 ( void ) NET {
   JrhShowDetails( JRH_TBL_SHOW_TIME );
}

// Shows high score details table.
function void JrhShowDetails( int showTime ) {
   setFont( "SMALLFONT" );

   // High score disabled.
   if ( ! JrhIsEnabled() ) {
      hudMessage(
         s : "\ciThe high score is disabled\c-" ;
         HUDMSG_PLAIN, JRH_LINE_NOTICE, 0, 1.5, JRH_LINE_NOTICE_Y, 3.0
      );
   }
   // High score loading.
   /*else if ( JrhGetLoadStatus() != JRH_STATUS_LOADED ) {
      // High score is loading.
      if ( JrhGetLoadStatus() == JRH_STATUS_WORKING ) {
         hudMessage( 
            s : "\ciThe high score is loading. Please retry in a bit\c-" ;
            HUDMSG_PLAIN, JRH_LINE_NOTICE, 0, 1.5, JRH_LINE_NOTICE_Y, 3.0
         );
      }
      // Error.
      else {
         hudMessage( 
            s : "\ciThe high score failed to load\c-" ;
            HUDMSG_PLAIN, JRH_LINE_NOTICE, 0, 1.5, JRH_LINE_NOTICE_Y, 3.0
         );
      }
   }*/
   // No high score set.
   else if ( ! JrhIsSet() ) {
      hudMessage( 
         s : "\ciNo high score is set for the map\c-" ;
         HUDMSG_PLAIN, JRH_LINE_NOTICE, 0, 1.5, JRH_LINE_NOTICE_Y, 3.0
      );
   }
   // Show.
   else {
      acs_ExecuteAlways( _jrh_script_details, 0, showTime );
   }
}

//for converting map name to upper case

#define CASE_DIFFERENCE ('A' - 'a')
int g_toUpperBuffer[1024];

function str toUpper (str s)
{
    int i, c;

    for (i = 0; GetChar(s,i) != '\0'; ++i)
    {
        c = GetChar (s, i);

        if (c >= 'a' && c <= 'z')
            g_toUpperBuffer[i] = c + CASE_DIFFERENCE;
        else
            g_toUpperBuffer[i] = c;
    }

    g_toUpperBuffer[i] = '\0';
    return strparam (a:g_toUpperBuffer);
}

//LEADERBOARD STUFF
//- Some constants
#define LB_ENTRIES_PER_PAGE 30
#define LB_HUDMSG_ID 900
//- Script numbers (pukeable)
#define LB_TOGGLE 891
#define LB_UP 892
#define LB_DOWN 893
#define LB_SPECIAL 894
#define LB_ONCONNECT 898
//- Script numbers (non-pukeable)
#define LB_INIT 881
#define LB_CLIENTINIT 882
#define LB_UPDATE 883
#define LB_DISCONNECT 884
//- Player leaderboard menu data
int lb_playeropen[MAX_PLAYERS];
int lb_playeroffset[MAX_PLAYERS];
//- Entry count
int lb_count = 0;

script LB_INIT OPEN {
	//Clear menu data
	for (int i=0; i<MAX_PLAYERS; i++) {
		lb_playeropen[i] = false;
		lb_playeroffset[i] = 0;
	}
	ACS_Execute( LB_UPDATE, 0 );
}

script LB_CLIENTINIT OPEN CLIENTSIDE {
	RequestScriptPuke(LB_ONCONNECT, 0, 0, 0);
}

script LB_UPDATE (void) {
	if (!is_online() || !JrhIsEnabled() || JmGameGetMapType() == JMG_MAP_TEAM)
		terminate;
	//Get entry count for current map
	str mappbs = StrParam(s:toUpper(StrParam(n:PRINTNAME_LEVEL)),s:"_pbs");
	int res = GetDBEntries(mappbs);
	lb_count = CountDBResults(res);
	FreeDBResults(res);
}

function void DisplayLeaderboard(void) {
	int player = PlayerNumber();
	if (lb_playeropen[player] == 1) {
		if (!is_online()) {
			print(s:"Leaderboards can be used only in online games");
			lb_playeropen[player] = false;
			return;
		} else if (!JrhIsEnabled()) {
			print(s:"Leaderboards are disabled");
			lb_playeropen[player] = false;
			return;
		} else if (JmGameGetMapType() == JMG_MAP_TEAM) {
			print(s:"Leaderboards cannot be used on team maps");
			lb_playeropen[player] = false;
			return;
		}
		//Prepare leaderboard
		ACS_Execute(LB_UPDATE, 0);
		int offset = lb_playeroffset[player];
		//- Some sanity checks here (if for some reason other scripts screwed up)
		if (offset < 0 || offset >= lb_count) {
			lb_playeroffset[player] = 0;
			offset = 0;
		}
		//- Get all the stuff from database
		int limit = LB_ENTRIES_PER_PAGE;
		str mappbs = StrParam(s:toUpper(StrParam(n:PRINTNAME_LEVEL)),s:"_pbs");
		int lbres = SortDBEntries( mappbs, limit, offset, 0 );
		int lbreslen = CountDBResults(lbres);
		if (lbreslen < limit) limit = lbreslen;
		str shownnames = "\n\n\n\n";
		for (int i=0; i<limit; i++) {
			//While we're getting data, we also construct strings on the fly
			int rank = offset+i+1;
			str rankname = GetDBResultKeyString(lbres, i);
			str playercolor = "\ca";
			//- If a player is logged in, he will be marked a different color.
			if (PlayerIsLoggedIn(playernumber()) && GetPlayerAccountName(playernumber()) == rankname)
				playercolor = "\cf";
			//- Truncate if too long
			rankname = StrLeft(rankname, 30);
			//- Construct left ident
			str il;
			if (rank < 10) il = "   ";
			else if (rank < 100) il = "  ";
			else if (rank < 1000) il = " ";
			else il = "";
			//- Construct right ident
			str ir = "";
			int irspaces = 30 - StrLen(rankname);
			for (int j=0; j<irspaces; j++)
				ir = StrParam(s:ir, s:" ");
			//- Construct a line
			int pbtime = GetDBResultValue(lbres, i);
			int pbmins = (pbtime / (TICS_IN_SECOND * SECONDS_IN_MINUTE));
			int pbsecs = (pbtime / TICS_IN_SECOND) % SECONDS_IN_MINUTE;
			int pbcsecs = cal_cseconds(pbtime % TICS_IN_SECOND);
			shownnames = StrParam(s:shownnames, s:"\cj", i:rank, s:". ",
						s:il, s:playercolor, s:rankname, s:ir, s:" \cb",
						s:number_prefix( pbmins ), i:pbmins, s:":",
						s:number_prefix( pbsecs ), i:pbsecs, s:"\cs.",
						s:number_prefix( pbcsecs ), i:pbcsecs, s:"\c-\n");
		}
		FreeDBResults(lbres);
		//- Make statinfo string
		str statinfo = "\n\n\n\n";
		for (i=0; i<LB_ENTRIES_PER_PAGE; i++)
			statinfo = StrParam(s:statinfo,s:"\n");
		statinfo = StrParam(s:statinfo,s:"\n\ccFor global leaderboards please visit http://grandvoid.sickedwick.net/jmstats");
		//Display results
		FadeTo(0,0,0,0.15,0.0);
		SetFont("BIGFONT");
		HudMessage(s:"\cgJUMPMAZE LEADERBOARDS"; HUDMSG_PLAIN | HUDMSG_NOWRAP, LB_HUDMSG_ID+0, CR_RED, 1.5, -0.1, 0.0);
		SetFont("CONFONT");
		HudMessage(s:shownnames; HUDMSG_PLAIN, LB_HUDMSG_ID+1, CR_UNTRANSLATED, 1.5, -0.1, 0.0);
		HudMessage(s:statinfo; HUDMSG_PLAIN, LB_HUDMSG_ID+2, CR_UNTRANSLATED, 1.5, -0.1, 0.0);
	} else {
		//Hide leaderboard
		FadeTo(0,0,0,0.0,0.0);
		HudMessage(s:""; HUDMSG_PLAIN, LB_HUDMSG_ID+0, CR_UNTRANSLATED, 0.0, 0.0, 0.0);
		HudMessage(s:""; HUDMSG_PLAIN, LB_HUDMSG_ID+1, CR_UNTRANSLATED, 0.0, 0.0, 0.0);
		HudMessage(s:""; HUDMSG_PLAIN, LB_HUDMSG_ID+2, CR_UNTRANSLATED, 0.0, 0.0, 0.0);
	}
}

script LB_TOGGLE (void) NET {
	int player = PlayerNumber();
	if (lb_playeropen[player]) {
		//Close
		lb_playeropen[player] = 0;
		LocalAmbientSound("menu/clear", 127);
	} else {
		//Open
		lb_playeropen[player] = 1;
		LocalAmbientSound("menu/activate", 127);
		lb_playeroffset[player] = 0;
	}
	DisplayLeaderboard();
}

script LB_UP (int count) NET {
	int player = PlayerNumber();
	if (lb_playeropen[player] == 0)
		terminate;
	if (count <= 0)
		count = 1;
	LocalAmbientSound("menu/cursor", 127);
	lb_playeroffset[player] -= count;
	if (lb_playeroffset[player] < 0)
		lb_playeroffset[player] = 0;
	DisplayLeaderboard();
}

script LB_DOWN (int count) NET {
	int player = PlayerNumber();
	if (lb_playeropen[player] == 0)
		terminate;
	if (count <= 0)
		count = 1;
	LocalAmbientSound("menu/cursor", 127);
	lb_playeroffset[player] += count;
	if (lb_playeroffset[player] >= lb_count)
		lb_playeroffset[player] = lb_count - 1;
	DisplayLeaderboard();
}

script LB_SPECIAL (void) NET {
	int player = PlayerNumber();
	if (lb_playeropen[player] == 0)
		terminate;
	if (PlayerIsLoggedIn(playernumber()) == 0)
		terminate;
	str mappbs = StrParam(s:toUpper(StrParam(n:PRINTNAME_LEVEL)),s:"_pbs");
	int count = GetDBEntryRank(mappbs, GetPlayerAccountName(playernumber()), 0);
	LocalAmbientSound("menu/cursor", 127);
	lb_playeroffset[player] = count - (LB_ENTRIES_PER_PAGE / 2);
	if (lb_playeroffset[player] < 0) lb_playeroffset[player] = 0;
	DisplayLeaderboard();
}

script LB_ONCONNECT (void) NET {
	lb_playeropen[PlayerNumber()] = 0;
	lb_playeroffset[PlayerNumber()] = 0;
}








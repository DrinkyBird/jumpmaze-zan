// Enables extra admin functionality
//
// Author: 
// Hypnotoad
//
// License:
// Free for any purpose. I'm not liable for any damages.

#library "admin"
#include "zcommon.acs"

#import "jmgame.acs"

global bool 50:admins[];

#define MODE_NORMAL 0
#define MODE_ADMIN 1
#define MODE_NOCLIPPER 2
#define MAX_PLAYERS 64

int AdminMode[MAX_PLAYERS];

function void GiveAdminPowers(int player)
{
    SetActivatorToPlayer(player);
    GiveInventory("AdminPower",1);
    SetActorProperty(0, APROP_Speed, 2.2);
}

function void GiveAdminInventory(int player)
{
    SetActivatorToPlayer(player);
    GiveInventory("BackPack", 1);
    GiveInventory("Megasphere", 1);
    GiveInventory("Cell", 600);
    GiveInventory("Clip", 600);
    GiveInventory("Shell", 600);
    GiveInventory("RocketAmmo", 600);
    GiveInventory("Minigun", 1);
    GiveInventory("Railgun", 1);
    GiveInventory("BFG9000", 1);
    GiveInventory("Chaingun", 1);
    GiveInventory("PlasmaRifle", 1);
    GiveInventory("RocketLauncher", 1);
    GiveInventory("Shotgun", 1);
    GiveInventory("SuperShotgun", 1);
}

function void TakeAdminInventory(int player)
{
    SetActivatorToPlayer(player);
    TakeInventory("Minigun", 1);
    TakeInventory("Railgun", 1);
    TakeInventory("BFG9000", 1);
    TakeInventory("Chaingun", 1);
    TakeInventory("PlasmaRifle", 1);
    TakeInventory("RocketLauncher", 1);
    TakeInventory("Shotgun", 1);
    TakeInventory("SuperShotgun", 1);
}

function void TakeAdminPowers(int player)
{
    SetActivatorToPlayer(player);
    GiveInventory("AdminDePower",1);
    SetActorProperty(0, APROP_Speed, 1.0);
}

function void MorphToNoClipper(int player)
{
    SetActivatorToPlayer(player);
    MorphActor(0,"AdminNoClipper", "", 0x7fffffff, MRF_NEWTIDBEHAVIOUR | MRF_WHENINVULNERABLE, "", "");
}

function void UnmorphPlayer(int player)
{
    SetActivatorToPlayer(player);
    UnMorphActor(0,true);
}

function bool IsAdminAccount(int player)
{
    if ((StrCmp (GetPlayerAccountName(player), "hypnotoad") != 0)
    && (StrCmp (GetPlayerAccountName(player), "wirtualnosc") != 0)
    && (StrCmp (GetPlayerAccountName(player), "plussean") != 0))
    {
        return false;
    }
    
    return true;
}

// snaity checking that a player is definitely admin!
function bool VerifyAdmin(int player)
{
    return IsAdminAccount(player) && admins[player];
}

// Sets a player as an admin and morphs
script "SetAdmin" (int player)
{
    if (!IsAdminAccount(player))
    {
        PrintBold(s:"Access Denied!");
        terminate;
    }
    
    admins[player] = true;
    JmGameDisallowPlayerHs(player);
    printbold(n:player + 1, s:" has activated their admin powers!");
    AdminMode[playernumber()] = MODE_NORMAL;
}

script "AdminPower" (int player)
{
    UnmorphPlayer(player);
    delay(10);       
    GiveAdminPowers(player);
    delay(5);
    GiveAdminInventory(player);
}

script "AdminNoClip" (int player)
{
    UnmorphPlayer(player);
    delay(10);
    MorphToNoClipper(player);
}

script "ToggleAdminPower" (void) net
{
    if (!VerifyAdmin(playernumber()))
        terminate;

    int mode = AdminMode[playernumber()];
    if (mode == MODE_NORMAL || mode == MODE_NOCLIPPER) {
        AdminMode[playernumber()] = MODE_ADMIN;
        acs_namedexecute("AdminPower", 0, playernumber());
    }
    else if (mode == MODE_ADMIN) {
        AdminMode[playernumber()] = MODE_NOCLIPPER;
        acs_namedexecute("AdminNoClip", 0, playernumber());
    }
}

script "AdminDePower" (int player) net
{
    if (!VerifyAdmin(playernumber()))
        terminate;
        
    AdminMode[playernumber()] = MODE_NORMAL;
    UnmorphPlayer(player);
    delay(10);       
    TakeAdminPowers(player);
    delay(5);
    TakeAdminInventory(player);
}

script "AdminEnter" ENTER
{
	if (admins[playernumber()])
	{
        if (!VerifyAdmin(playernumber()))
        {
			print(s:"You are not authorized for Admin mode");
			admins[playernumber()] = FALSE;
        }
	}
}

script "AdminDisconnect" (int disc) DISCONNECT
{
	if (admins[disc])
	{
		admins[disc] = FALSE;
	}
}

#library "SpectatorFunctions.acs"
#include "zcommon.acs"

#define PLAYER_TID 7000
#define MAX_PLAYERS 64
#define MAX_PLAYER_NUMBER MAX_PLAYERS - 1
#define MSB_2 0xC0000000
#define LSB_6 0x0000003F

int packets[3];
int playerSpying[MAX_PLAYERS];

///////////////////////////////////////////////////
//////////////////// Functions ///////////////////
/////////////////////////////////////////////////

// Initialise array so players are watching themselves
function void InitSpyingArray(void)
{
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        playerSpying[i] = i;
    }
}

// A bitwise right shift that works properly
function int rshiftu(int n, int s)
{
    if (n & 0x80000000)
    {
        return (n & 0x7FFFFFFF) >> s | (1 << (31 - s));
    }
    return n >> s;
}

////////////////////////////////////////////////////////
//////////////////// Client Scripts ///////////////////
//////////////////////////////////////////////////////

script "Client_Init" OPEN CLIENTSIDE
{
    Delay(5); // Give time for TIDs to be set

    InitSpyingArray();
    
    SetHudSize(640, 400, 0);
    SetActivatorToPlayer(ConsolePlayerNumber()); // So the activator isn't the world
    
    int playerNum = ConsolePlayerNumber();
    int specTID;
    int specPlayerNum;
    int specSpyPlayerNum;
    str spy;
    str spyee;
    int watching;
    
    while (true)
    {
        specTID = CheckPlayerCamera(playerNum);
        
        SetActivator(specTID);
        specPlayerNum = PlayerNumber();
        SetActivatorToPlayer(playerNum);
        
        // Update the server with who we're spectating
        if (playerSpying[playerNum] != specPlayerNum)
        {
            if (specPlayerNum == -1) // We're not looking at a camera, we're looking at ourselves
            {
                NamedRequestScriptPuke("Server_UpdateArray", playerNum);
            }
            else
            {
                NamedRequestScriptPuke("Server_UpdateArray", specPlayerNum);
            }
        }
        
        // Display information
        if (GetUserCVar(playerNum, "SpyMessage"))
        {
            // Are we spying on someone else?
            if (playerNum != specPlayerNum && specPlayerNum != -1)
            {
                specSpyPlayerNum = playerSpying[specPlayerNum];
                // Is the player we're spying on also spying on someone else?
                if (specSpyPlayerNum != specPlayerNum && specSpyPlayerNum != playerNum)
                {
                    spy = StrParam(n:specPlayerNum + 1);
                    spyee = StrParam(n:specSpyPlayerNum + 1);
                    HudMessage(s:spy, s:" is watching ", s: spyee; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, 0.1, 190.1, 0.25);
                }
            }
            
            // Show who is spying on you
            watching = 0;
            for (int player = 0; player < MAX_PLAYERS; player++)
            {
                // We know you're watching yourself
                if (player == playerNum)
                {
                    continue;
                }
            
                if (playerSpying[player] == playerNum && CheckPlayerCamera(player) != -1)
                {
                    spy = StrParam(n:player + 1);
                    HudMessage(s:spy; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, 0.1, 210.1 + watching * 10.0, 0.25);
                    
                    watching++;
                }
            }
            if (watching)
            {
                HudMessage(s:"Watching You:"; HUDMSG_PLAIN, 0, CR_WHITE, 0.1, 200.1, 0.25);
            }
        }
        
        SetActivator(0); // So it still runs when you join the game
        
        Delay(5);
    }
}

script "Client_UpdateArray" (int packet1, int packet2, int packet3) CLIENTSIDE
{
    // Activator is server
    SetActivatorToPlayer(ConsolePlayerNumber());
    
    // Get position in array
    int position = (rshiftu((packet1 & MSB_2), 26) | rshiftu((packet2 & MSB_2), 28) | rshiftu((packet3 & MSB_2), 30));
    position *= 15;
    
    // Store player numbers from first packet
    int shift = 24;
    for (int i = 0; i < 5; i++)
    {
        playerSpying[position] = (packet1 >> shift) & LSB_6;
    
        if (position == MAX_PLAYER_NUMBER)
        {
            terminate;
        }
    
        shift -= 6;
        position++;
    }
    
    // Store player numbers from second packet
    shift = 24;
    for (int j = 0; j < 5; j++)
    {
        playerSpying[position] = (packet2 >> shift) & LSB_6;
    
        if (position == MAX_PLAYER_NUMBER)
        {
            terminate;
        }
    
        shift -= 6;
        position++;
    }
    
    // Store player numbers from third packet
    shift = 24;
    for (int k = 0; k < 5; k++)
    {
        playerSpying[position] = (packet3 >> shift) & LSB_6;
    
        if (position == MAX_PLAYER_NUMBER)
        {
            terminate;
        }
    
        shift -= 6;
        position++;
    }
}

////////////////////////////////////////////////////////
//////////////////// Server Scripts ///////////////////
//////////////////////////////////////////////////////

script "Server_UpdateArray" (int spyingPlayerNum) NET
{
    playerSpying[PlayerNumber()] = spyingPlayerNum;
}

script "Initialise_Array" OPEN
{
    InitSpyingArray();
}

script "Who Is Spying On Who" OPEN
{
    Delay(5); // Let array initialise

    int offset, shift;
    
    while (true)
    {
        offset = 0;
        
        for (int chunk = 0; chunk < 5; chunk++)
        {
            packets[0] = 0;
            packets[1] = 0;
            packets[2] = 0;
            packets[0] |= (chunk << (26 + (2 * 0))) & MSB_2; // Set position of the packets
            packets[1] |= (chunk << (26 + (2 * 1))) & MSB_2; // Set position of the packets
            packets[2] |= (chunk << (26 + (2 * 2))) & MSB_2; // Set position of the packets
            
            for (int packet = 0; packet < 3; packet++)
            {
                shift = 24;
                
                for (int player = 0; player < 5; player++) // We can only cram 5 player numbers into an integer
                {
                    int pn;
                    if (CheckPlayerCamera(player + offset) != -1)
                    {
                        pn = playerSpying[player + offset];
                    }
                    else
                    {
                        playerSpying[player + offset] = player + offset;
                        pn = player + offset;
                    }
                    packets[packet] |= pn << shift;
                    
                    shift -= 6;
                    
                    // Send final packets
                    if (player + offset == MAX_PLAYER_NUMBER)
                    {
                        ACS_NamedExecuteAlways("Client_UpdateArray", 0, packets[0], packets[1], packets[2]);
                        
                        restart;
                    }
                }
                
                offset += 5;
            }
            
            ACS_NamedExecuteAlways("Client_UpdateArray", 0, packets[0], packets[1], packets[2]);
        }
        
        Delay(5);
    }
}

/////////////////////////////////////////////////////////
//////////////////// TID Maintenance ///////////////////
///////////////////////////////////////////////////////

script "Spectator_Enter" ENTER
{
    Delay(2); // Delay this a bit so we ensure other mods run their scripts

    if (!ActivatorTID())
    {
        Thing_ChangeTID(0, PLAYER_TID + PlayerNumber());
    }
}

script "Spectator_Death" DEATH
{
    Delay(2); // Delay this a bit so we ensure other mods run their scripts

    if (!ActivatorTID())
    {
        Thing_ChangeTID(0, 0);
    }
}

script "Spectator_Respawn" RESPAWN
{
    Delay(2); // Delay this a bit so we ensure other mods run their scripts

    if (!ActivatorTID())
    {
        Thing_ChangeTID(0, PLAYER_TID + PlayerNumber());
    }
}

script "Spectator_Disconnect" (int playerNum) DISCONNECT
{
    playerSpying[playerNum] = playerNum;
}
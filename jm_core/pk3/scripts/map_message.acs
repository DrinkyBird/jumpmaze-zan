// This script file is used to display a standard message listing basic
// information about the current map.
//
// Author: 
// Positron (modified by Hypnotoad and Wirtualnosc)
//
// License:
// Free for any purpose. I'm not liable for any damages.

#library "jmmapmsg"
#include "zcommon.acs"

#import "jmgame.acs"
#import "map_skill.acs"
#import "constants.acs"
#import "utility.acs"
#import "ranker_hs.acs"
#import "ranker_solo.acs"
#import "jmrun.acs"
#import "paths.acs"

// Intro format numbers used by CVar jm_introformat.
#define MMIF_DETAIL 0
#define MMIF_CLASSIC 1
#define MMIF_STANDARD 2
#define MMIF_JUMPIX 3
#define MMIF_RETROMAZE 4
#define MMIF_HYPNOJUMP 5

#define MM_TOTAL_DIFFICULTIES 6

// Base ID used by HudMessage.
#define MM_HUDMSG_BASEID 600

// String versions with appropriate colors of the map skills available for most formats.
str _mm_diff[ MM_TOTAL_DIFFICULTIES ] = {
   "\ccVaried\c-", "\cqVery Easy\c-", "\cdEasy\c-",
   "\chModerate\c-", "\cgHard\c-", "\cmVery Hard\c-",
};

// Seconds to wait for the record holder name to load before proceeding further.
#define MM_TIMEOUT 2

int _mm_par[ 10 ];
bool _mm_is_set = false;

function void MmSet( str author, int skill, str par ) {
	SetCVarString( "jm_mm_author", author );
	SetCVar( "jm_mm_difficulty", skill );
	SetCVar( "jm_mm_maptype", JmGameGetMapType() );
	SetCVar( "jm_mm_paths", pathCount() );
	
	for ( int i = 0; i < pathCount(); i++ ) {
		MmSetPar( pathPar( pathPlayerRoute( i ) ) );
		SetCVarString( StrParam( s:"jm_mm_par", i:i ), StrParam( a:_mm_par ) );
		SetCVar( StrParam( s:"jm_mm_recordtime", i:i ), VALUE_NONE );
		SetCVarString( StrParam( s:"jm_mm_recordholder", i:i ), "" );
	}
	
	_mm_is_set = true;
}

// Removes the whitespace found in the par time, so it looks nicer when
// shown in the map message.
function void MmSetPar( str par ) {
   int par_length = strlen( par );
   int par_pos = 0;

   for ( int pos = 0; pos < par_length; pos += 1 ) {
      int character = getChar( par, pos );
      if ( character != ' ' ) {
         _mm_par[ par_pos ] = character;
         par_pos += 1;
      }
   }

   _mm_par[ par_pos ] = '\0';
}

script "JmMm_EntryServer" ENTER {
	delay( 20 );
	if ( _mm_is_set ) {
		if ( JrhIsEnabled() ) {
			// Wait for the ranker to complete loading the high score and check if a record holder can be displayed.
			if ( JrhGetLoadStatus() == JRH_STATUS_WORKING ) {
				scriptWait( JrhGetLoadScript() );
			}
			int which = pathPlayerRoute( PlayerNumber() );
			if ( JrhIsSet( which ) )
			{
				SetCVar( StrParam( s:"jm_mm_recordtime", i:( PlayerNumber() % pathCount() ) ), JrhGetFinishTime( which ) );
				if ( JmGameGetMapType() == JMG_MAP_SOLO )
					SetCVarString( StrParam( s:"jm_mm_recordholder", i:( PlayerNumber() % pathCount() ) ), StrParam( a:_jrs_hs_author[ which ] ) );
				if ( JmGameGetMapType() == JMG_MAP_JMRUN )
					SetCVarString( "jm_mm_recordholder0", StrParam( a:_jmr_hs_author ) );
			}
		}
		ACS_NamedExecuteAlways( "JmMm_EntryClient", 0 );
	}
}

script "JmMm_EntryClient" ( void ) CLIENTSIDE {
	int format = GetCVar( "jm_introformat" );
	switch ( format )
	{
		case MMIF_CLASSIC: ACS_NamedExecuteAlways( "JmMm_Classic", 0 ); break;
		case MMIF_STANDARD: ACS_NamedExecuteAlways( "JmMm_Standard", 0 ); break;
		case MMIF_DETAIL: ACS_NamedExecuteAlways( "JmMm_Detailed", 0 ); break;
		case MMIF_JUMPIX: ACS_NamedExecuteAlways( "JmMm_Jumpix", 0 ); break;
		case MMIF_RETROMAZE: ACS_NamedExecuteAlways( "JmMm_Retromaze", 0 ); break;
		case MMIF_HYPNOJUMP: ACS_NamedExecuteAlways( "JmMm_Hypnojump", 0 ); break;
	}
}



function str MmGetAuthor( void ) {
	return GetCVarString( "jm_mm_author" );
}
function int MmGetSkill( void ) {
	return GetCVar( "jm_mm_difficulty" );
}
function str MmGetSkillName( void ) {
	int skill = MmGetSkill();
	if ( skill >= 0 && skill < MM_TOTAL_DIFFICULTIES )
		return _mm_diff[ MmGetSkill() ];
	str name = GetCVarString( "jm_mm_difficultyname" );
	if ( StrCmp( name, "" ) != 0 )
		return name;
	return "\cjUnknown\c-";
}
function str MmGetPar( void ) {
	return GetCVarString( StrParam( s:"jm_mm_par", i:( PlayerNumber() % GetCVar( "jm_mm_paths" ) ) ) );
}
function str MmGetRecordHolder( void ) {
	return GetCVarString( StrParam( s:"jm_mm_recordholder", i:( PlayerNumber() % GetCVar( "jm_mm_paths" ) ) ) );
}
function int MmGetRecordTime( void ) {
	return GetCVar( StrParam( s:"jm_mm_recordtime", i:( PlayerNumber() % GetCVar( "jm_mm_paths" ) ) ) );
}
function int MmGetMapType( void ) {
	return GetCVar( "jm_mm_maptype" );
}



Script "JmMm_Classic" ( void ) CLIENTSIDE {
	Delay(46);
	//Classic display has different color for moderate skill
	str skillstr = MmGetSkillName();
	if ( MmGetSkill() == MAP_SKILL_MODERATE ) skillstr = "\cuModerate\c-";

	setFont("SMALL");
	//Initially Print function was used for classic display; However,
	//since it isn't very flexible, we will try to emulate it using HudMessage.
	HudMessage(
		s:"Level of Difficulty \n", s:skillstr, s:"\n\n",
		s:"Par Time \n\ch", s:MmGetPar();
		HUDMSG_PLAIN | HUDMSG_LOG, MM_HUDMSG_BASEID, CR_GOLD, 1.5, 0.375, 3.0, 1.0
		);
}

Script "JmMm_Standard" ( void ) CLIENTSIDE {
	if ( MmGetRecordTime() > 0 && JrhIsAutoShowDetailsTable() )
		RequestScriptPuke( 999, 0, 0, 0, 0 );
	Delay(46);
	setFont("SMALL");
	str mapmsg = StrParam(s:"\cf", n:PRINTNAME_LEVELNAME, s:" - ", n:PRINTNAME_LEVEL, s:" - Author: ", s:MmGetAuthor(), s:"\n\n");
	mapmsg = StrParam(s:mapmsg, s:"\ciLevel of Difficulty\n", s:MmGetSkillName(), s:"\n\n");
	mapmsg = StrParam(s:mapmsg, s:"\ciPar Time\n\cn", s:MmGetPar());
	if ( !JrhIsAutoShowDetailsTable() && MmGetRecordTime() != VALUE_NONE && MmGetMapType() != JMG_MAP_TEAM )
		mapmsg = StrParam(s:mapmsg, s:"\n\n\ciMap record set by:\c-\n", s:MmGetRecordHolder(), s:"\c-");
	hudMessage(s:mapmsg; HUDMSG_FADEOUT | HUDMSG_LOG, MM_HUDMSG_BASEID, CR_GOLD, 1.5, 0.3, 3.0, 1.0);
}

Script "JmMm_Detailed" ( void ) CLIENTSIDE {
	Delay(15);
	//Text setup
	str mapdetails = StrParam(s:"\n\n\cuShort name: \cj", n:PRINTNAME_LEVEL, s:"\n\cuAuthor: ", s:MmGetAuthor());
	if ( MmGetMapType() == JMG_MAP_TEAM ) {
		mapdetails = StrParam(s:mapdetails, s:"\n\cuMap type: \cqTeam");
	} else {
		mapdetails = StrParam(s:mapdetails, s:"\n\cuMap type: \ciSolo");
	}
	mapdetails = StrParam(s:mapdetails, s:"\n\cuDifficulty: ", s:MmGetSkillName(), s:"\n");
	mapdetails = StrParam(s:mapdetails, s:"\cuPar time: \cn", s:MmGetPar());
	if ( MmGetRecordTime() != VALUE_NONE && MmGetMapType() != JMG_MAP_TEAM ) {
		mapdetails = StrParam(s:mapdetails, s:"\n\cuRecord holder: \c-", s:MmGetRecordHolder());
	}
	if ( MmGetRecordTime() != VALUE_NONE ) {
		//Calculate record time
		int rectime = MmGetRecordTime();
		int minutes = rectime / ( SECONDS_IN_MINUTE * TICS_IN_SECOND );
		int seconds = ( rectime / TICS_IN_SECOND ) % SECONDS_IN_MINUTE;
		int cseconds = cal_cseconds( rectime % TICS_IN_SECOND );
		mapdetails = StrParam(s:mapdetails, s:"\n\cuRecord time: \cp", 
				s:number_prefix(minutes), i:minutes, s:":",
				s:number_prefix(seconds), i:seconds, s:".",
				s:number_prefix(cseconds), i:cseconds);
	}
	
	//Print everything
	SetFont("BIGFONT");
	HudMessage(s:"\cj", n:PRINTNAME_LEVELNAME; HUDMSG_FADEOUT | HUDMSG_LOG, MM_HUDMSG_BASEID, CR_WHITE, 1.5, -0.49, 7.0, 1.25);
	SetFont("SMALL");
	HudMessage(s:mapdetails; HUDMSG_TYPEON | HUDMSG_LOG, MM_HUDMSG_BASEID+1, CR_WHITE, 1.5, -0.49, 7.0, 0.005, 0.75);
}

Script "JmMm_Jumpix" ( void ) CLIENTSIDE {
	int skill = MmGetSkill();
	str skillStr = MmGetSkillName();
	if ( skill == MAP_SKILL_VERY_EASY ) {
		skillStr = "\cfVery Easy";
	}
	int colorLen = 2;
	if ( GetChar( skillStr, 1 ) == '[' )
		colorLen = 5;
	
    setfont("BIGFONT");
    HudMessage(n: PRINTNAME_LEVELNAME; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID, CR_WHITE, 0.5, 0.5, 1.0, 0.7, 0.5);
    delay(35);
    setfont("BIGFONT");
    HudMessage(s: StrLeft( skillStr, colorLen ), n: PRINTNAME_LEVELNAME; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID+1, CR_WHITE, 0.5, 0.5, 0.7, 0.5, 0.5);
    delay(24);
    setfont("BIGFONT");
    HudMessage(n: PRINTNAME_LEVELNAME; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID, CR_WHITE, 0.5, 0.5, 0.7, 0.5, 0.5);
    delay(24);

    int message_time = 5.8;
    if ( MmGetRecordTime() != VALUE_NONE && MmGetMapType() != JMG_MAP_TEAM )
    {
        message_time = 7.8;
    }
    
    setfont("BIGFONT");
    HudMessage(s:StrLeft( skillStr, colorLen ), n: PRINTNAME_LEVELNAME; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID+2, CR_WHITE, 0.5, 0.5, message_time, 0.7, 0.5);
    delay(24);
    
    SetFont("SMALLFONT");
    HudMessage(s:"Author: ", s:MmGetAuthor(); HUDMSG_FADEINOUT, MM_HUDMSG_BASEID+3, CR_WHITE, 0.5, 0.55, 1.8, 0.4, 0.4);
    delay(35*2);
    
    SetFont("SMALLFONT");
    HudMessage(s:"Map: ", s:StrLeft( skillStr, colorLen ), n: PRINTNAME_LEVEL; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID+4, CR_WHITE, 0.5, 0.55, 1.8, 0.4, 0.4);
	
	delay(35*2);
	
	SetFont("SMALLFONT");
	HudMessage(s:"Difficulty: ", s:skillStr; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID+5, CR_WHITE, 0.5, 0.55, 1.8, 0.4, 0.4);
    
    if ( MmGetRecordTime() != VALUE_NONE && MmGetMapType() != JMG_MAP_TEAM )
    {
    	delay(35*2);
        setFont( "SMALLFONT" );
		hudMessage(s:"Record holder: \ca", s:MmGetRecordHolder(); HUDMSG_FADEINOUT, MM_HUDMSG_BASEID+6, CR_WHITE, 0.5, 0.55, 1.8, 0.4, 0.4);
    }
}

Script "JmMm_Retromaze" ( void ) CLIENTSIDE {
	Delay(15);
	
	int skill = MmGetSkill();
	str skillStr;
	switch ( skill ) {
		default:
		case MAP_SKILL_UNSET: skillStr = "\cmUnset"; break;
		case MAP_SKILL_VARIED: skillStr = "\cnVarying"; break;
		case MAP_SKILL_VERY_EASY: skillStr = "\cdVery Easy"; break;
		case MAP_SKILL_EASY: skillStr = "\cqEasy"; break;
		case MAP_SKILL_MODERATE: skillStr = "\ciModerate"; break;
		case MAP_SKILL_HARD: skillStr = "\cgHard"; break;
		case MAP_SKILL_VERY_HARD: skillStr = "\crVery Hard"; break;
	}
	
	SetFont( "BIGFONT" );
	HudMessage( s:"\cj", n:PRINTNAME_LEVELNAME; HUDMSG_FADEINOUT | HUDMSG_LOG, MM_HUDMSG_BASEID, CR_WHITE, 1.5, 0.7, 5 << 16 );
	SetFont( "DOOMFONT" );
	HudMessage( s:"\cjby: ", s:MmGetAuthor(); HUDMSG_FADEINOUT | HUDMSG_LOG, MM_HUDMSG_BASEID+1, CR_WHITE, 1.5, 0.71, 5 << 16);
	HudMessage( s:"\cjDifficulty: ", s:skillStr; HUDMSG_FADEINOUT | HUDMSG_LOG, MM_HUDMSG_BASEID+2, CR_WHITE, 1.5, 0.72, 5 << 16 );
}

Script "JmMm_Hypnojump" ( void ) CLIENTSIDE {
	SetFont( "BIGFONT" );
	HudMessage( n:PRINTNAME_LEVELNAME; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID, CR_RED, 0.5, 0.5, 3, 8.0, 0.1, 0.5 );
	Delay( 35 * 2 );
	SetFont( "SMALLFONT" );
	HudMessage( s:"Author: ", s:MmGetAuthor(), s:"\c-"; HUDMSG_FADEINOUT, MM_HUDMSG_BASEID+1, CR_WHITE, 0.5, 0.55, 3, 6.0, 0.1, 0.1 );
}

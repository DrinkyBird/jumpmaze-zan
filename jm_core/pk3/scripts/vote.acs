// Enables simple map restart/nextmap voting - REPLACE WITH VOTEDEF WHEN 3.0 IS RELEASED
//
// Author: 
// Hypnotoad
//
// License:
// Free for any purpose. I'm not liable for any damages.

#library "vote"
#include "zcommon.acs"

#import "jm2_cdwn.acs"
#import "admin.acs"

#define HUDID1 1500 //cant be 1 - 9, 960+, 732+, 27233, 412, 985, 986, 11142
#define HUDID2 1501
#define HUDID3 1502
#define HUDID4 1503

#define TYPE_RESTART 0
#define TYPE_NEXTMAP 1
#define MAXTYPE 1
#define TIMER_LENGTH 30

#define RESULT_VOTEYES_WIN 0
#define RESULT_VOTENO_WIN 1
#define RESULT_DRAW 2
#define RESULT_NOTENOUGHVOTES 3
#define RESULT_CANCELLED 4

#define VOTE_YES 1
#define VOTE_NO 2

#define MAX_PLAYERS 64

int plvote[MAX_PLAYERS];
bool readyToReset[MAX_PLAYERS];
int votetimer = 0;
bool voteInProgress = FALSE;
bool voteCancelled = FALSE;

script "vote_clearHudClientside" (void) CLIENTSIDE
{
    clearMostHud();
}

// Resets the map, were it not for unexplained delays I would make this a function
script "vote_resetMap" (void)
{
    // This clears the hud on the client, which otherwise persits after resetmap()
    ACS_NamedExecute("vote_clearHudClientside",0);
    
    // I have no idea what this delay is for but presumably it was needed to clear the hud properly
    delay(1);
    
    // Clear the hud server side as well
    clearMostHud();
    
    // Restart the map
    resetmap();
    
    // Again, absolutely no clue what this was for lol
    delay(1);
    terminate;
}

// Change to next map, were it not for unexplained delays I would make this a function
script "vote_nextMap" (void)
{
    if (GetCVar("sv_noexit") == 0)
    {
        Exit_Normal(0);
    }
    else
    {
        consolecommand("nextmap");
    }
    
    // Why?
    delay(1);
    terminate;
}

// Allow server admins to cancel votes
script "vote_cancel" (void) NET
{
    bool isServer = (PlayerNumber() == -1);
    
    // Allow the server (rcon) and admin players to use this.
    // Stupid ACS and its lack of short-circuit evaluation!
    if (!isServer)
    {
        if (!IsAdminAccount(PlayerNumber()))
        {
            terminate;
        }
    }
    
    if (voteInProgress)
    {
        voteCancelled = true;
    }
    else
    {
        str msg = "There isn't a vote currently in progress.";
        if (isServer)
        {
            Log(s: msg);
        }
        else
        {
            Print(s: msg);
        }
    }
}

script 981 (int type) NET
{
    if (voteInProgress || type > MAXTYPE)
        terminate;
    if (!PlayerInGame(PlayerNumber()))
    {
        print(s:"You must be in game to initiate a vote");
        terminate;
    }
    if (timerTics() < 35*2 || timerstage < 2)
    {
        print(s:"You must wait at least 2 seconds after the map starts before voting");
        terminate;
    }
    
    if (type == TYPE_NEXTMAP && !GetCVar("jm_voting_enablenext"))
    {
        Print(s: "Next map votes are disabled on this server");
        terminate;
    }
    else if (type == TYPE_RESTART && !GetCVar("jm_voting_enablereset"))
    {
        Print(s: "Reset map votes are disabled on this server");
        terminate;
    }
    
    bool shouldReset = false;
    if (type == TYPE_RESTART)
    {
        shouldReset = checkReadyToReset(PlayerNumber());
    }  
    
    // When there's only one player change immediately
    // Or when everyone is ready to reset, reset immediately
    if (PlayerCount() == 1 || shouldReset)
    {
        delay(5);
        if (type == TYPE_RESTART)
        {
            // Reset the map
            ACS_NamedExecute("vote_resetMap",0);
            terminate;
        }
        else if (type == TYPE_NEXTMAP)
        {
            // Go to next map
            ACS_NamedExecute("vote_nextMap",0);
            terminate;
        }
    }
    
    // Set the vote to be in progress
    voteInProgress = true;
    voteCancelled = false;
    
    // Clear current votes
    clearVotes();
    
    // Resize the hud as needed
    SetHudSize(640, 480, 0);
    
    // Default the person initiating the vote to have voted yes
    plvote[PlayerNumber()] = 1;
    print(s:"You voted \cdYES \c*(by default)");
 
    // Display main vote title
    Setfont("bigfont");
    HudMessageBold(n:0, s:" has initiated a vote!";HUDMSG_PLAIN, HUDID4, CR_RED, 320.0, 50.0, 5000.0);
    
    SetActivator(-1);
    Setfont("smallfont");
    
    // Run the vote timer on a separate script
    ACS_NamedExecute("vote_startTimer",0);
    if (type == TYPE_RESTART)
    {
        // Start reset vote
        HudMessageBold(s:"\ccDo you want to \cdrestart the map? \n \n \ccPuke \cd982 \ccfor \cdYES \n \n \ccPuke \cg983 \ccfor \cgNO";HUDMSG_PLAIN, HUDID1, CR_RED, 320.0, 100.0, 32.0);    
        ACS_NamedExecuteWait("vote_doVote", 0, "Restart map", "Do not restart map", type);
    }
    else if (type == TYPE_NEXTMAP)
    {
        // Start next map vote
        HudMessageBold(s:"\ccDo you want to \cdproceed to the next map? \n \n \ccPuke \cd982 \ccfor \cdYES \n \n \ccPuke \cg983 \ccfor \cgNO";HUDMSG_PLAIN, HUDID1, CR_RED, 320.0, 100.0, 32.0);
        ACS_NamedExecuteWait("vote_doVote", 0, "Go to next map", "Do not go to next map", type);
    }
    
    // End the vote
    clearVotes();
    
    // Cooldown
    delay(35 * 2);
    voteInProgress = false;
}

script "ReadyToReset" (void) NET
{
    int player = PlayerNumber();
    if (readyToReset[player] || !playeringame(player))
        terminate;
        
    readyToReset[PlayerNumber()] = true;
    printbold(n:0,s:"\c* declared themselves \cdready to reset.");
    
    if (checkReadyToReset(-1))
    {
        ACS_NamedExecute("vote_resetMap",0);
    }
}

script "ReadyToReset_Disconnect" (int who) DISCONNECT
{
    if (checkReadyToReset(who))
    {
        ACS_NamedExecute("vote_resetMap",0);
    }
}

// Checks if all players are ready to reset,
// pass in a player number to exclude from the count,
// otherwise pass in -1
function bool checkReadyToReset (int exclude)
{
    int readyCount = 0;
    int inGameCount = 0;
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        // exclude this player from the count
        // probably because they just voted to reset
        if (i == exclude)
            continue;
        
        if (playeringame(i))
        {
            inGameCount++;
            if (readyToReset[i])
                readyCount++;
        }
    }
    return inGameCount > 0 && readyCount == inGameCount;
}

// Checks vote while voting, only returns result if majority winner
function int checkCurrentVote (void)
{
    if (voteCancelled)
    {
        return RESULT_CANCELLED;
    }
        
    int vote1Count = 0;
    int vote2Count = 0;
    int inGameCount = 0;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (playeringame(i))
        {
            inGameCount++;
            if (plvote[i] == VOTE_YES)
            {
                vote1Count++;
            }
            else if (plvote[i] == VOTE_NO)
            {  
                vote2Count++;
            }
        }
    }
    
    int totalCount = vote1Count + vote2Count;
    int noVote = inGameCount - totalCount;
    if (vote1Count > (vote2Count + noVote))
    {
        return RESULT_VOTEYES_WIN;
    }
    else if (vote2Count > (vote1Count + noVote))
    {
        return RESULT_VOTENO_WIN;
    }
    else if (noVote == 0)
    {
        return RESULT_DRAW;
    }

    return RESULT_NOTENOUGHVOTES;
}

// Checks final result
function int checkVote (void)
{
    if (voteCancelled)
    {
        return RESULT_CANCELLED;
    }
        
    int vote1Count = 0;
    int vote2Count = 0;
    int inGameCount = 0;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (playeringame(i))
        {
            inGameCount++;
            if (plvote[i] == VOTE_YES)
            {
                vote1Count++;
            }
            else if (plvote[i] == VOTE_NO)
            {
                vote2Count++;
            }
        }
    }
    
    int totalCount = vote1Count + vote2Count;
    int noVote = inGameCount - totalCount;
    if (noVote >= totalCount)
    {
        return RESULT_NOTENOUGHVOTES;
    }
    else if (vote1Count > vote2Count)
    {
        return RESULT_VOTEYES_WIN;
    }
    else if (vote2Count > vote1Count)
    {
        return RESULT_VOTENO_WIN;
    }

    return RESULT_DRAW;
}

script "vote_startTimer" (void)
{
    votetimer = 0;
    while (votetimer < TIMER_LENGTH)
    {
        votetimer++;
        delay(35);
    }
    votetimer = 0;
}

script "vote_doVote" (int vote1, int vote2, int type)
{
    // Clear some huds
    HudMessageBold(s:"";HUDMSG_PLAIN, HUDID3, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, HUDID2, CR_WHITE, 320.0, 200.0, 20.0 );
    
    // Initialise results
    int currentResult = RESULT_NOTENOUGHVOTES;
        
    // Collect vote for duration of timer, or until there is enough
    while (votetimer < TIMER_LENGTH)
    {
        SetHudSize(640, 480, 0);
        Setfont("smallfont");
        HudMessageBold(s:"Collecting votes...";HUDMSG_PLAIN, HUDID2, CR_WHITE, 320.0, 200.0, 30.0 );

        currentResult = checkCurrentVote();

        if (currentResult != RESULT_NOTENOUGHVOTES)
        {
            break;
        }
        delay(1);
    }
    
    // Get final vote
    currentResult = checkVote();
    HudMessageBold(s:"Voting finished";HUDMSG_PLAIN, HUDID2, CR_WHITE, 320.0, 200.0, 20.0 );
    
    // Implement result
    if (currentResult == RESULT_NOTENOUGHVOTES)
    {
        clearVoteHud();
        HudMessageBold(s:"\n\n\nNot enough votes!";HUDMSG_PLAIN, HUDID3, CR_WHITE, 320.0, 200.0, 20.0 );
        terminate;
    }
    else if (currentResult == RESULT_VOTEYES_WIN)
    {
        clearVoteHud();
        HudMessageBold(s:"\n\n\n",s:vote1,s:" won the vote!";HUDMSG_PLAIN, HUDID3, CR_WHITE, 320.0, 200.0, 20.0 );
        
        // 3 second delay for people to register what just happened
        delay(35*3);
        if (type == TYPE_RESTART)
        {
            ACS_NamedExecute("vote_resetMap",0);
            terminate;
        }
        else if (type == TYPE_NEXTMAP)
        {
            ACS_NamedExecute("vote_nextMap",0);
            terminate;
        }
    }
    else if (currentResult == RESULT_VOTENO_WIN)
    {
        // vote failed
        clearVoteHud();
        HudMessageBold(s:"\n\n\n",s:vote2,s:" won the vote!";HUDMSG_PLAIN, HUDID3, CR_WHITE, 320.0, 200.0, 20.0 );
        terminate;
    }
    else if (currentResult == RESULT_DRAW)
    {
        clearVoteHud();
        HudMessageBold(s:"\n\n\nDraw, defaulting to no action.";HUDMSG_PLAIN, HUDID3, CR_WHITE, 320.0, 200.0, 20.0 );
        terminate;
    }
    else if (currentResult == RESULT_CANCELLED)
    {
        clearVoteHud();
        HudMessageBold(s:"\n\n\nThe vote was cancelled by an admin.";HUDMSG_PLAIN, HUDID3, CR_WHITE, 320.0, 200.0, 20.0 );
    }
}

script 982 (void) NET
{
    if (votetimer > 0)
    {
        plvote[PlayerNumber()] = VOTE_YES;
        print(s:"You voted \cdYES");
    }
}

script 983 (void) NET
{
    if (votetimer > 0)
    {
        plvote[PlayerNumber()] = VOTE_NO;
        print(s:"You voted \cdNO");
    }
}

function void clearVoteHud(void)
{
    HudMessageBold(s:"";HUDMSG_PLAIN, HUDID1, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, HUDID2, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, HUDID3, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, HUDID4, CR_WHITE, 320.0, 200.0, 20.0 );
}

function void clearMostHud(void) //clear 1 - 100, 900+, 700+, 27233, 412, 985, 986, 11142
{
    for (int a = 0; a < 100; a++)
    {
        HudMessageBold(s:"";HUDMSG_PLAIN, a, CR_WHITE, 320.0, 200.0, 20.0 );
    }
    for (int b = 900; b < 999; b++)
    {
        HudMessageBold(s:"";HUDMSG_PLAIN, b, CR_WHITE, 320.0, 200.0, 20.0 );
    }
    for (int c = 690; c < 799; c++)
    {
        HudMessageBold(s:"";HUDMSG_PLAIN, c, CR_WHITE, 320.0, 200.0, 20.0 );
    }
    HudMessageBold(s:"";HUDMSG_PLAIN, 27233, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, 412, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, 985, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, 986, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, 11142, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, 839, CR_WHITE, 320.0, 200.0, 20.0 );
    HudMessageBold(s:"";HUDMSG_PLAIN, 300, CR_WHITE, 320.0, 200.0, 20.0 );
}

function void clearVotes(void)
{
    for(int a = 0; a <MAX_PLAYERS; a++)
    {
        plvote[a] = 0;
    }
}

function int timerTics(void)
{
    return timer() - cdownOffset;
}